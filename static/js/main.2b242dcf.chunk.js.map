{"version":3,"sources":["logo.svg","ListItems.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","listItems","props","items","map","item","className","key","type","id","value","text","onChange","e","setUpdate","target","onClick","deleteItem","icon","duration","easing","library","add","faTrash","App","addItem","preventDefault","newitem","state","currentItem","updateditems","setState","handleInput","Date","now","filteredItems","filter","updateditem","onSubmit","this","placeholder","React","Component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"iJAAAA,EAAOC,QAAU,IAA0B,kC,qMCqC5BC,MAhCf,SAAmBC,GACf,IACMD,EADQC,EAAMC,MACIC,KAAI,SAAAC,GAExB,OAAO,yBAAKC,UAAU,OAAOC,IAAKF,EAAKE,KAC5B,2BACC,2BAAOC,KAAK,OACRC,GAAIJ,EAAKE,IACTG,MAAOL,EAAKM,KACZC,SACI,SAACC,GACGX,EAAMY,UAAUD,EAAEE,OAAOL,MAAML,EAAKE,QAGjD,8BAEC,kBAAC,IAAD,CAAiBD,UAAU,UAAUU,QAAS,WAC1Cd,EAAMe,WAAWZ,EAAKE,MACvBW,KAAK,gBAKxB,OACI,6BACI,kBAAC,IAAD,CAAUC,SAAU,IAAKC,OAAO,eAC/BnB,K,eCxBboB,IAAQC,IAAIC,KAQL,IAoFQC,EApFf,kDAEE,WAAYtB,GAAQ,IAAD,8BACjB,cAAMA,IAYRuB,QAAU,SAACZ,GACTA,EAAEa,iBACF,IAAMC,EAAU,EAAKC,MAAMC,YAC3B,GAAkB,KAAfF,EAAQhB,KAAU,CACnB,IAAMmB,EAAY,sBAAO,EAAKF,MAAMzB,OAAlB,CAAwBwB,IAC1C,EAAKI,SAAS,CAAC5B,MAAM2B,EACnBD,YAAY,CACVlB,KAAK,GACLJ,IAAI,QArBO,EA2BnByB,YAAc,SAACnB,GACb,EAAKkB,SAAS,CACZF,YAAY,CACVlB,KAAME,EAAEE,OAAOL,MACfH,IAAK0B,KAAKC,UA/BG,EAoCnBjB,WAAa,SAACV,GACZ,IAAM4B,EAAgB,EAAKP,MAAMzB,MAAMiC,QAAO,SAAA/B,GAAI,OAAEA,EAAKE,MAAMA,KAC/D,EAAKwB,SAAS,CACZ5B,MAAMgC,EACNN,YAAY,CACVlB,KAAK,GACLJ,IAAI,OA1CS,EA+CnBO,UAAY,SAACH,EAAKJ,GAChB,IAAM8B,EAAc,EAAKT,MAAMzB,MAC/BkC,EAAYjC,KAAI,SAAAC,GACXA,EAAKE,MAAQA,IACdF,EAAKM,KAAOA,MAGhB,EAAKoB,SAAS,CACZ5B,MAAMkC,EACNR,YAAY,CACVlB,KAAK,GACLJ,IAAI,OAxDR,EAAKqB,MAAQ,CACVzB,MAAO,GACP0B,YAAY,CACVlB,KAAK,GACLJ,IAAI,KANQ,EAFrB,qDAoEI,OACE,6BACE,0BAAME,GAAG,aAAa6B,SAAUC,KAAKd,SACrC,2BAAOjB,KAAK,OAAOgC,YAAY,aAAa9B,MAAQ6B,KAAKX,MAAMC,YAAYlB,KAAMC,SAAU2B,KAAKP,cAC9F,4BAAQxB,KAAK,UAAb,WAEF,2BAAI+B,KAAKX,MAAMzB,MAAMQ,MAErB,kBAAC,EAAD,CAAWR,MAAOoC,KAAKX,MAAMzB,MACzBc,WAAYsB,KAAKtB,WACjBH,UAAWyB,KAAKzB,iBA9E5B,GAAyB2B,IAAMC,WCHXC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.2b242dcf.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import React from 'react';\r\nimport './ListItems.css';\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome'\r\nimport FlipMove from 'react-flip-move';\r\n\r\nfunction listItems(props) {\r\n    const items = props.items;\r\n    const listItems = items.map(item => \r\n        {\r\n        return <div className=\"list\" key={item.key}>\r\n                   <p>\r\n                    <input type=\"text\" \r\n                        id={item.key} \r\n                        value={item.text}\r\n                        onChange={\r\n                            (e)=>{\r\n                                props.setUpdate(e.target.value,item.key)\r\n                            }\r\n                        }></input>\r\n                   <span>\r\n       \r\n                    <FontAwesomeIcon className=\"faicons\" onClick={() => {\r\n                        props.deleteItem(item.key)\r\n                    }} icon=\"trash\" />\r\n                    </span>\r\n                    </p>\r\n               </div>\r\n    })\r\n    return (\r\n        <div>\r\n            <FlipMove duration={300} easing=\"ease-in-out\">\r\n            {listItems}\r\n            </FlipMove>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default listItems","import React from 'react';\nimport logo from './logo.svg';\nimport './App.css';\nimport ListItems from './ListItems'\nimport { library } from '@fortawesome/fontawesome-svg-core'\nimport { faTrash } from '@fortawesome/free-solid-svg-icons'\n\nlibrary.add(faTrash)\n\n//import React, { Component } from 'react'\n\n\n//main app using class component\n// step1 add a form with button and text field\n\nexport class App extends React.Component {\n\n  constructor(props) {\n    super(props)\n    this.state = {\n       items: [],\n       currentItem:{\n         text:'',\n         key:''\n       }\n    }\n\n  //this.handleInput = this.handleInput.bind(this);\n  }\n  \n  addItem = (e)=>{\n    e.preventDefault();\n    const newitem = this.state.currentItem;\n    if(newitem.text!==\"\"){\n      const updateditems = [...this.state.items,newitem];\n      this.setState({items:updateditems,\n        currentItem:{\n          text:'',\n          key:''\n        }\n      });\n    }\n  }\n\n  handleInput = (e)=>{\n    this.setState({\n      currentItem:{\n        text: e.target.value,\n        key: Date.now()\n      }\n    })\n  }\n\n  deleteItem = (key)=>{\n    const filteredItems = this.state.items.filter(item=>item.key!==key);\n    this.setState({\n      items:filteredItems,\n      currentItem:{\n        text:'',\n        key:''\n      }\n    })\n  }\n\n  setUpdate = (text,key)=>{\n    const updateditem = this.state.items;\n    updateditem.map(item => {\n      if(item.key === key){\n        item.text = text;\n      }\n    })\n    this.setState({\n      items:updateditem,\n      currentItem:{\n        text:'',\n        key:''\n      }\n    })\n  }\n\n  \n\n  render() {\n    return (\n      <div>\n        <form id=\"to-do-form\" onSubmit={this.addItem}>\n        <input type=\"text\" placeholder=\"Enter task\" value= {this.state.currentItem.text} onChange={this.handleInput}></input>\n          <button type=\"submit\">submit</button>\n        </form>\n        <p>{this.state.items.text}</p>\n\n        <ListItems items={this.state.items} \n            deleteItem={this.deleteItem}\n            setUpdate={this.setUpdate}></ListItems>\n      </div>\n    )\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}